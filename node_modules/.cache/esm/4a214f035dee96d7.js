let express,fs,mongoose,MongoClient,runInNewContext,sortByLetter;_5de‍.w("express",[["default",["express"],function(v){express=v}]]);_5de‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_5de‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_5de‍.w("mongodb",[["MongoClient",["MongoClient"],function(v){MongoClient=v}]]);_5de‍.w("vm",[["runInNewContext",["runInNewContext"],function(v){runInNewContext=v}]]);_5de‍.w("./utilities/helpers",[["sortByLetter",["sortByLetter"],function(v){sortByLetter=v}]]);






MongoClient.connect('mongodb://localhost:27017/', (err, db) => {
  const anagramApi = db.db('anagram-api')
  const app = express()

  app.listen(3000, () => console.log(`App listening on port: ${port}`))

  app.get('/words/:word', async (req,res) => {  
    const anagrams = await anagramApi.collection('words').find({ sorted: sortByLetter(req.params.word) }).toArray().map(obj => obj.word)
    res.send(anagrams)
  })
})

// mongoose.connect('mongodb://localhost/anagram-api', {useNewUrlParser: true});

// var db = mongoose.connection;
// db.on('error', console.error.bind(console, 'connection error:'));
// db.once('open', function() {
//   // we're connected!
//   console.log('connected')
// });

// function findAnagrams(word, count, isProper) {
//   MongoClient.connect(url, function(err, db) {
//     var dbo = db.db("anagram-api")
//     return dbo.collection('words').find({ sorted: sortByLetter(word) }).toArray((err, res) => {
//       console.log('res here', res)
//       return res
//     })
//   })
// }

// app.get('/', (req,res) => res.send('Hello World'))
// app.get('/words/:word', (req,res) => {
//   MongoClient.connect(url, function(err, db) {
//     var dbo = db.db("anagram-api")
//     dbo.collection('words').find({ sorted: sortByLetter(req.params.word) }).toArray((err, response) => {
//       // close DB?
//       res.send(response.map(obj => obj.word))
//     })
//   })
// })

// app.delete('/words/:word', (req, res) => {
//   MongoClient.connect(url, function(err, db) {
//     var dbo = db.db("anagram-api")
//     const deleteAll = req.query.deleteAnagrams.toLowerCase() === 'true'
//     if(deleteAll) {
//       dbo.collection('words').deleteMany({ sorted: sortByLetter(req.params.word) }, (err, obj) => {
//         if(err) console.log(err)
//         else console.log('success delete many', obj)
//       })
//     } else {
//       dbo.collection('words').deleteOne({ word: req.params.word }, (err, obj) => {
//         if (err) console.log(err)
//         else console.log('success delete:', obj)
//       })
//     }
//   })
// })

// app.put('/words/', (req, res) => {
//   MongoClient.connect(url, function(err, db) {
//     var dbo = db.db("anagram-api")
//     dbo.collection('words').insertMany({  word: req.params.word }, (err, obj) => {
//       if (err) console.log(err)
//       else console.log('success delete:', obj)
//     })
//   })
// })

// function getMedian(words) {
//   //even? odd?
//   const i = Math.round(words.length / 2)
//   let x = words.map(word => {
//     return word.toLowerCase()
//   })

//   console.log(x)
//   return x.sortByLetter()[i].length
// }

// // combine avg and median calls into a single iteration, possibly tied into the initial forEach on the response

// function getAvg(words) {
//   let total = 0;
//   words.forEach(word => {
//     // console.log(word)
//     total += word.length
//   })
//   const length = words.length
//   // console.log(`total: ${total} and length: ${length}`)
//   return total/length
// }

// app.get('/stats', (req, res) => {
//   MongoClient.connect(url, function(err, db) {
//     var dbo = db.db("anagram-api")
//     dbo.collection('words').find().toArray((err, response) => {
//       let min = 1, max = 1, words = []
//       response.forEach(obj => {
//         if(obj.word.length < min) {
//           min = obj.word.length;
//         } else if(obj.word.length > max) {
//           max = obj.word.length
//         }
//         words.push(obj.word)
//       })

//       const stats = {
//         min,
//         max,
//         median: getMedian(words),
//         average: getAvg(words),
//       }

//       res.send(stats)
//     })
//   })
// })

// // app.post('words/words', (req, res) => {
// //   console.log('...', req.params)
// // })

// app.listen(port, () => console.log(`App listening on port: ${port}`))

// when a word is inserted
// id
// text
// alphabetized
// proper