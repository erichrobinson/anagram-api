let bodyParser,express,MongoClient,deleteWord,getAnagrams,getStats,insertWords;_fb7‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_fb7‍.w("express",[["default",["express"],function(v){express=v}]]);_fb7‍.w("mongodb",[["MongoClient",["MongoClient"],function(v){MongoClient=v}]]);_fb7‍.w("./queries",[["deleteWord",["deleteWord"],function(v){deleteWord=v}],["getAnagrams",["getAnagrams"],function(v){getAnagrams=v}],["getStats",["getStats"],function(v){getStats=v}],["insertWords",["insertWords"],function(v){insertWords=v}]]);




MongoClient.connect('mongodb://localhost:27017/', (err, db) => {
  const wordsCollection = db.db('anagram-api').collection('words')
  const app = express()
  const port = 3000

  app.use(bodyParser.json())
  app.listen(port, () => console.log(`App listening on port: ${port}`))

  // this endpoint is slow
  app.get('/stats', async (req, res) => {
    const stats = await getStats(wordsCollection)
    res.send(`${JSON.stringify(stats)}`)
  })

  // don't insert if it already exists
  // notify of records not inserted
  app.post('/words', async (req, res) => {
    const result = await insertWords(wordsCollection, req.body.words)
    res.send(`Number of documents inserted: ${result.insertedCount}`)
  })

  // handle query param better
  // handle word not found
  app.delete('/words/:word', async (req, res) => {
    const result = await deleteWord(wordsCollection, req.params.word, req.query.deleteAnagrams)
    res.send(`Number of documents deleted: ${result.deletedCount}`)
  })

  // may need to filter out words that are alike but proper "god" and "God"
  // handle word not found
  app.get('/words/:word', async (req,res) => {
    const anagrams = await getAnagrams(db, req.params.word)
    res.send(anagrams)
  })
})
